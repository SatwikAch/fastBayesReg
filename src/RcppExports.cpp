// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/fastBayesReg.h"
#include <RcppArmadillo.h>
#include <RcppEnsmallen.h>
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// log1mexpm
arma::vec log1mexpm(arma::vec& x);
static SEXP _fastBayesReg_log1mexpm_try(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(log1mexpm(x));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fastBayesReg_log1mexpm(SEXP xSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fastBayesReg_log1mexpm_try(xSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// log1pexp
arma::vec log1pexp(arma::vec& x);
static SEXP _fastBayesReg_log1pexp_try(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(log1pexp(x));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fastBayesReg_log1pexp(SEXP xSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fastBayesReg_log1pexp_try(xSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// log1pexp_mat
arma::mat log1pexp_mat(arma::mat& x);
static SEXP _fastBayesReg_log1pexp_mat_try(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(log1pexp_mat(x));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fastBayesReg_log1pexp_mat(SEXP xSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fastBayesReg_log1pexp_mat_try(xSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// sim_linear_reg
Rcpp::List sim_linear_reg(int n, int p, int q, double R2, double X_cor, double beta_size);
static SEXP _fastBayesReg_sim_linear_reg_try(SEXP nSEXP, SEXP pSEXP, SEXP qSEXP, SEXP R2SEXP, SEXP X_corSEXP, SEXP beta_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type R2(R2SEXP);
    Rcpp::traits::input_parameter< double >::type X_cor(X_corSEXP);
    Rcpp::traits::input_parameter< double >::type beta_size(beta_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_linear_reg(n, p, q, R2, X_cor, beta_size));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fastBayesReg_sim_linear_reg(SEXP nSEXP, SEXP pSEXP, SEXP qSEXP, SEXP R2SEXP, SEXP X_corSEXP, SEXP beta_sizeSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fastBayesReg_sim_linear_reg_try(nSEXP, pSEXP, qSEXP, R2SEXP, X_corSEXP, beta_sizeSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// sim_linear_reg_multi
Rcpp::List sim_linear_reg_multi(int n, int p, int m, int q, double R2, double X_cor, double beta_size);
static SEXP _fastBayesReg_sim_linear_reg_multi_try(SEXP nSEXP, SEXP pSEXP, SEXP mSEXP, SEXP qSEXP, SEXP R2SEXP, SEXP X_corSEXP, SEXP beta_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type R2(R2SEXP);
    Rcpp::traits::input_parameter< double >::type X_cor(X_corSEXP);
    Rcpp::traits::input_parameter< double >::type beta_size(beta_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_linear_reg_multi(n, p, m, q, R2, X_cor, beta_size));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fastBayesReg_sim_linear_reg_multi(SEXP nSEXP, SEXP pSEXP, SEXP mSEXP, SEXP qSEXP, SEXP R2SEXP, SEXP X_corSEXP, SEXP beta_sizeSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fastBayesReg_sim_linear_reg_multi_try(nSEXP, pSEXP, mSEXP, qSEXP, R2SEXP, X_corSEXP, beta_sizeSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// sim_logit_reg
Rcpp::List sim_logit_reg(int n, int p, int q, double X_cor, double X_var, double beta_size, double density);
static SEXP _fastBayesReg_sim_logit_reg_try(SEXP nSEXP, SEXP pSEXP, SEXP qSEXP, SEXP X_corSEXP, SEXP X_varSEXP, SEXP beta_sizeSEXP, SEXP densitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type X_cor(X_corSEXP);
    Rcpp::traits::input_parameter< double >::type X_var(X_varSEXP);
    Rcpp::traits::input_parameter< double >::type beta_size(beta_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type density(densitySEXP);
    rcpp_result_gen = Rcpp::wrap(sim_logit_reg(n, p, q, X_cor, X_var, beta_size, density));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fastBayesReg_sim_logit_reg(SEXP nSEXP, SEXP pSEXP, SEXP qSEXP, SEXP X_corSEXP, SEXP X_varSEXP, SEXP beta_sizeSEXP, SEXP densitySEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fastBayesReg_sim_logit_reg_try(nSEXP, pSEXP, qSEXP, X_corSEXP, X_varSEXP, beta_sizeSEXP, densitySEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// sim_multiclass_reg
Rcpp::List sim_multiclass_reg(int K, int n, int p, int q, double X_cor, double X_var, double beta_size, double intercept_size, Rcpp::Nullable<Rcpp::NumericMatrix> intercept0);
static SEXP _fastBayesReg_sim_multiclass_reg_try(SEXP KSEXP, SEXP nSEXP, SEXP pSEXP, SEXP qSEXP, SEXP X_corSEXP, SEXP X_varSEXP, SEXP beta_sizeSEXP, SEXP intercept_sizeSEXP, SEXP intercept0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type X_cor(X_corSEXP);
    Rcpp::traits::input_parameter< double >::type X_var(X_varSEXP);
    Rcpp::traits::input_parameter< double >::type beta_size(beta_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type intercept_size(intercept_sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericMatrix> >::type intercept0(intercept0SEXP);
    rcpp_result_gen = Rcpp::wrap(sim_multiclass_reg(K, n, p, q, X_cor, X_var, beta_size, intercept_size, intercept0));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fastBayesReg_sim_multiclass_reg(SEXP KSEXP, SEXP nSEXP, SEXP pSEXP, SEXP qSEXP, SEXP X_corSEXP, SEXP X_varSEXP, SEXP beta_sizeSEXP, SEXP intercept_sizeSEXP, SEXP intercept0SEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fastBayesReg_sim_multiclass_reg_try(KSEXP, nSEXP, pSEXP, qSEXP, X_corSEXP, X_varSEXP, beta_sizeSEXP, intercept_sizeSEXP, intercept0SEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// fast_normal_lm
Rcpp::List fast_normal_lm(arma::vec& y, arma::mat& X, int mcmc_sample, int burnin, int thinning, double a_sigma, double b_sigma, double A_tau);
static SEXP _fastBayesReg_fast_normal_lm_try(SEXP ySEXP, SEXP XSEXP, SEXP mcmc_sampleSEXP, SEXP burninSEXP, SEXP thinningSEXP, SEXP a_sigmaSEXP, SEXP b_sigmaSEXP, SEXP A_tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type mcmc_sample(mcmc_sampleSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< int >::type thinning(thinningSEXP);
    Rcpp::traits::input_parameter< double >::type a_sigma(a_sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type b_sigma(b_sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type A_tau(A_tauSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_normal_lm(y, X, mcmc_sample, burnin, thinning, a_sigma, b_sigma, A_tau));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fastBayesReg_fast_normal_lm(SEXP ySEXP, SEXP XSEXP, SEXP mcmc_sampleSEXP, SEXP burninSEXP, SEXP thinningSEXP, SEXP a_sigmaSEXP, SEXP b_sigmaSEXP, SEXP A_tauSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fastBayesReg_fast_normal_lm_try(ySEXP, XSEXP, mcmc_sampleSEXP, burninSEXP, thinningSEXP, a_sigmaSEXP, b_sigmaSEXP, A_tauSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// special_rmvnorm
arma::mat special_rmvnorm(int n, arma::vec& mu, arma::mat& Omega);
static SEXP _fastBayesReg_special_rmvnorm_try(SEXP nSEXP, SEXP muSEXP, SEXP OmegaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Omega(OmegaSEXP);
    rcpp_result_gen = Rcpp::wrap(special_rmvnorm(n, mu, Omega));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fastBayesReg_special_rmvnorm(SEXP nSEXP, SEXP muSEXP, SEXP OmegaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fastBayesReg_special_rmvnorm_try(nSEXP, muSEXP, OmegaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// fast_normal_lm_sel
Rcpp::List fast_normal_lm_sel(arma::vec& y, arma::mat& X, int mcmc_sample, int burnin, int thinning, double a_sigma, double b_sigma, double A_tau, double sel_thres);
static SEXP _fastBayesReg_fast_normal_lm_sel_try(SEXP ySEXP, SEXP XSEXP, SEXP mcmc_sampleSEXP, SEXP burninSEXP, SEXP thinningSEXP, SEXP a_sigmaSEXP, SEXP b_sigmaSEXP, SEXP A_tauSEXP, SEXP sel_thresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type mcmc_sample(mcmc_sampleSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< int >::type thinning(thinningSEXP);
    Rcpp::traits::input_parameter< double >::type a_sigma(a_sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type b_sigma(b_sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type A_tau(A_tauSEXP);
    Rcpp::traits::input_parameter< double >::type sel_thres(sel_thresSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_normal_lm_sel(y, X, mcmc_sample, burnin, thinning, a_sigma, b_sigma, A_tau, sel_thres));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fastBayesReg_fast_normal_lm_sel(SEXP ySEXP, SEXP XSEXP, SEXP mcmc_sampleSEXP, SEXP burninSEXP, SEXP thinningSEXP, SEXP a_sigmaSEXP, SEXP b_sigmaSEXP, SEXP A_tauSEXP, SEXP sel_thresSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fastBayesReg_fast_normal_lm_sel_try(ySEXP, XSEXP, mcmc_sampleSEXP, burninSEXP, thinningSEXP, a_sigmaSEXP, b_sigmaSEXP, A_tauSEXP, sel_thresSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// fast_normal_multi_lm
Rcpp::List fast_normal_multi_lm(arma::mat& y, arma::mat& X, int mcmc_sample, int burnin, int thinning, double a_sigma, double b_sigma, double A_tau, bool mcmc_output, bool display_progress);
static SEXP _fastBayesReg_fast_normal_multi_lm_try(SEXP ySEXP, SEXP XSEXP, SEXP mcmc_sampleSEXP, SEXP burninSEXP, SEXP thinningSEXP, SEXP a_sigmaSEXP, SEXP b_sigmaSEXP, SEXP A_tauSEXP, SEXP mcmc_outputSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type mcmc_sample(mcmc_sampleSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< int >::type thinning(thinningSEXP);
    Rcpp::traits::input_parameter< double >::type a_sigma(a_sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type b_sigma(b_sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type A_tau(A_tauSEXP);
    Rcpp::traits::input_parameter< bool >::type mcmc_output(mcmc_outputSEXP);
    Rcpp::traits::input_parameter< bool >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_normal_multi_lm(y, X, mcmc_sample, burnin, thinning, a_sigma, b_sigma, A_tau, mcmc_output, display_progress));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fastBayesReg_fast_normal_multi_lm(SEXP ySEXP, SEXP XSEXP, SEXP mcmc_sampleSEXP, SEXP burninSEXP, SEXP thinningSEXP, SEXP a_sigmaSEXP, SEXP b_sigmaSEXP, SEXP A_tauSEXP, SEXP mcmc_outputSEXP, SEXP display_progressSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fastBayesReg_fast_normal_multi_lm_try(ySEXP, XSEXP, mcmc_sampleSEXP, burninSEXP, thinningSEXP, a_sigmaSEXP, b_sigmaSEXP, A_tauSEXP, mcmc_outputSEXP, display_progressSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// fast_normal_logit
Rcpp::List fast_normal_logit(arma::vec& y, arma::mat& X, int mcmc_sample, int burnin, int thinning, double A_tau);
static SEXP _fastBayesReg_fast_normal_logit_try(SEXP ySEXP, SEXP XSEXP, SEXP mcmc_sampleSEXP, SEXP burninSEXP, SEXP thinningSEXP, SEXP A_tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type mcmc_sample(mcmc_sampleSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< int >::type thinning(thinningSEXP);
    Rcpp::traits::input_parameter< double >::type A_tau(A_tauSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_normal_logit(y, X, mcmc_sample, burnin, thinning, A_tau));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fastBayesReg_fast_normal_logit(SEXP ySEXP, SEXP XSEXP, SEXP mcmc_sampleSEXP, SEXP burninSEXP, SEXP thinningSEXP, SEXP A_tauSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fastBayesReg_fast_normal_logit_try(ySEXP, XSEXP, mcmc_sampleSEXP, burninSEXP, thinningSEXP, A_tauSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// fast_normal_logit_single_gibbs
Rcpp::List fast_normal_logit_single_gibbs(arma::vec& y, arma::mat& X, int mcmc_sample, int burnin, int thinning, double A_tau, int verbose);
static SEXP _fastBayesReg_fast_normal_logit_single_gibbs_try(SEXP ySEXP, SEXP XSEXP, SEXP mcmc_sampleSEXP, SEXP burninSEXP, SEXP thinningSEXP, SEXP A_tauSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type mcmc_sample(mcmc_sampleSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< int >::type thinning(thinningSEXP);
    Rcpp::traits::input_parameter< double >::type A_tau(A_tauSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_normal_logit_single_gibbs(y, X, mcmc_sample, burnin, thinning, A_tau, verbose));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fastBayesReg_fast_normal_logit_single_gibbs(SEXP ySEXP, SEXP XSEXP, SEXP mcmc_sampleSEXP, SEXP burninSEXP, SEXP thinningSEXP, SEXP A_tauSEXP, SEXP verboseSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fastBayesReg_fast_normal_logit_single_gibbs_try(ySEXP, XSEXP, mcmc_sampleSEXP, burninSEXP, thinningSEXP, A_tauSEXP, verboseSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// scalable_normal_logit_single_gibbs
Rcpp::List scalable_normal_logit_single_gibbs(arma::vec& y, SEXP bigX, arma::uvec& rowidx, int mcmc_sample, int burnin, int thinning, double A_tau, int verbose);
static SEXP _fastBayesReg_scalable_normal_logit_single_gibbs_try(SEXP ySEXP, SEXP bigXSEXP, SEXP rowidxSEXP, SEXP mcmc_sampleSEXP, SEXP burninSEXP, SEXP thinningSEXP, SEXP A_tauSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< SEXP >::type bigX(bigXSEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type rowidx(rowidxSEXP);
    Rcpp::traits::input_parameter< int >::type mcmc_sample(mcmc_sampleSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< int >::type thinning(thinningSEXP);
    Rcpp::traits::input_parameter< double >::type A_tau(A_tauSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(scalable_normal_logit_single_gibbs(y, bigX, rowidx, mcmc_sample, burnin, thinning, A_tau, verbose));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fastBayesReg_scalable_normal_logit_single_gibbs(SEXP ySEXP, SEXP bigXSEXP, SEXP rowidxSEXP, SEXP mcmc_sampleSEXP, SEXP burninSEXP, SEXP thinningSEXP, SEXP A_tauSEXP, SEXP verboseSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fastBayesReg_scalable_normal_logit_single_gibbs_try(ySEXP, bigXSEXP, rowidxSEXP, mcmc_sampleSEXP, burninSEXP, thinningSEXP, A_tauSEXP, verboseSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// big_normal_logit_single_gibbs
Rcpp::List big_normal_logit_single_gibbs(arma::vec& y, SEXP bigX, int mcmc_sample, int burnin, int thinning, double A_tau, int verbose);
static SEXP _fastBayesReg_big_normal_logit_single_gibbs_try(SEXP ySEXP, SEXP bigXSEXP, SEXP mcmc_sampleSEXP, SEXP burninSEXP, SEXP thinningSEXP, SEXP A_tauSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< SEXP >::type bigX(bigXSEXP);
    Rcpp::traits::input_parameter< int >::type mcmc_sample(mcmc_sampleSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< int >::type thinning(thinningSEXP);
    Rcpp::traits::input_parameter< double >::type A_tau(A_tauSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(big_normal_logit_single_gibbs(y, bigX, mcmc_sample, burnin, thinning, A_tau, verbose));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fastBayesReg_big_normal_logit_single_gibbs(SEXP ySEXP, SEXP bigXSEXP, SEXP mcmc_sampleSEXP, SEXP burninSEXP, SEXP thinningSEXP, SEXP A_tauSEXP, SEXP verboseSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fastBayesReg_big_normal_logit_single_gibbs_try(ySEXP, bigXSEXP, mcmc_sampleSEXP, burninSEXP, thinningSEXP, A_tauSEXP, verboseSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// sparse_normal_logit_single_gibbs
Rcpp::List sparse_normal_logit_single_gibbs(arma::vec& y, arma::sp_mat& X, int mcmc_sample, int burnin, int thinning, double A_tau, int verbose);
static SEXP _fastBayesReg_sparse_normal_logit_single_gibbs_try(SEXP ySEXP, SEXP XSEXP, SEXP mcmc_sampleSEXP, SEXP burninSEXP, SEXP thinningSEXP, SEXP A_tauSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::sp_mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type mcmc_sample(mcmc_sampleSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< int >::type thinning(thinningSEXP);
    Rcpp::traits::input_parameter< double >::type A_tau(A_tauSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(sparse_normal_logit_single_gibbs(y, X, mcmc_sample, burnin, thinning, A_tau, verbose));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fastBayesReg_sparse_normal_logit_single_gibbs(SEXP ySEXP, SEXP XSEXP, SEXP mcmc_sampleSEXP, SEXP burninSEXP, SEXP thinningSEXP, SEXP A_tauSEXP, SEXP verboseSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fastBayesReg_sparse_normal_logit_single_gibbs_try(ySEXP, XSEXP, mcmc_sampleSEXP, burninSEXP, thinningSEXP, A_tauSEXP, verboseSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// fast_normal_multiclass
Rcpp::List fast_normal_multiclass(arma::vec& y, arma::mat& X, int num_class, int mcmc_sample, int burnin, int thinning, double A_tau);
static SEXP _fastBayesReg_fast_normal_multiclass_try(SEXP ySEXP, SEXP XSEXP, SEXP num_classSEXP, SEXP mcmc_sampleSEXP, SEXP burninSEXP, SEXP thinningSEXP, SEXP A_tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type num_class(num_classSEXP);
    Rcpp::traits::input_parameter< int >::type mcmc_sample(mcmc_sampleSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< int >::type thinning(thinningSEXP);
    Rcpp::traits::input_parameter< double >::type A_tau(A_tauSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_normal_multiclass(y, X, num_class, mcmc_sample, burnin, thinning, A_tau));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fastBayesReg_fast_normal_multiclass(SEXP ySEXP, SEXP XSEXP, SEXP num_classSEXP, SEXP mcmc_sampleSEXP, SEXP burninSEXP, SEXP thinningSEXP, SEXP A_tauSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fastBayesReg_fast_normal_multiclass_try(ySEXP, XSEXP, num_classSEXP, mcmc_sampleSEXP, burninSEXP, thinningSEXP, A_tauSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// fast_normal_multiclass_single_gibbs
Rcpp::List fast_normal_multiclass_single_gibbs(arma::vec& y, arma::mat& X, int num_class, int mcmc_sample, int burnin, int thinning, double A_tau, int verbose);
static SEXP _fastBayesReg_fast_normal_multiclass_single_gibbs_try(SEXP ySEXP, SEXP XSEXP, SEXP num_classSEXP, SEXP mcmc_sampleSEXP, SEXP burninSEXP, SEXP thinningSEXP, SEXP A_tauSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type num_class(num_classSEXP);
    Rcpp::traits::input_parameter< int >::type mcmc_sample(mcmc_sampleSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< int >::type thinning(thinningSEXP);
    Rcpp::traits::input_parameter< double >::type A_tau(A_tauSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_normal_multiclass_single_gibbs(y, X, num_class, mcmc_sample, burnin, thinning, A_tau, verbose));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fastBayesReg_fast_normal_multiclass_single_gibbs(SEXP ySEXP, SEXP XSEXP, SEXP num_classSEXP, SEXP mcmc_sampleSEXP, SEXP burninSEXP, SEXP thinningSEXP, SEXP A_tauSEXP, SEXP verboseSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fastBayesReg_fast_normal_multiclass_single_gibbs_try(ySEXP, XSEXP, num_classSEXP, mcmc_sampleSEXP, burninSEXP, thinningSEXP, A_tauSEXP, verboseSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// scalable_normal_multiclass_single_gibbs
Rcpp::List scalable_normal_multiclass_single_gibbs(arma::vec& y, arma::mat& X, int num_class, int mcmc_sample, int burnin, int thinning, double A_tau, int verbose);
static SEXP _fastBayesReg_scalable_normal_multiclass_single_gibbs_try(SEXP ySEXP, SEXP XSEXP, SEXP num_classSEXP, SEXP mcmc_sampleSEXP, SEXP burninSEXP, SEXP thinningSEXP, SEXP A_tauSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type num_class(num_classSEXP);
    Rcpp::traits::input_parameter< int >::type mcmc_sample(mcmc_sampleSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< int >::type thinning(thinningSEXP);
    Rcpp::traits::input_parameter< double >::type A_tau(A_tauSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(scalable_normal_multiclass_single_gibbs(y, X, num_class, mcmc_sample, burnin, thinning, A_tau, verbose));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fastBayesReg_scalable_normal_multiclass_single_gibbs(SEXP ySEXP, SEXP XSEXP, SEXP num_classSEXP, SEXP mcmc_sampleSEXP, SEXP burninSEXP, SEXP thinningSEXP, SEXP A_tauSEXP, SEXP verboseSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fastBayesReg_scalable_normal_multiclass_single_gibbs_try(ySEXP, XSEXP, num_classSEXP, mcmc_sampleSEXP, burninSEXP, thinningSEXP, A_tauSEXP, verboseSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// fast_mfvb_normal_logit
Rcpp::List fast_mfvb_normal_logit(arma::vec& y, arma::mat& X, int max_iter, double tol, double A, double in_E_inv_tau_sq, Rcpp::Nullable<Rcpp::NumericVector> in_E_omega, Rcpp::Nullable<Rcpp::NumericVector> in_E_beta);
static SEXP _fastBayesReg_fast_mfvb_normal_logit_try(SEXP ySEXP, SEXP XSEXP, SEXP max_iterSEXP, SEXP tolSEXP, SEXP ASEXP, SEXP in_E_inv_tau_sqSEXP, SEXP in_E_omegaSEXP, SEXP in_E_betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< double >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type in_E_inv_tau_sq(in_E_inv_tau_sqSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type in_E_omega(in_E_omegaSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type in_E_beta(in_E_betaSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_mfvb_normal_logit(y, X, max_iter, tol, A, in_E_inv_tau_sq, in_E_omega, in_E_beta));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fastBayesReg_fast_mfvb_normal_logit(SEXP ySEXP, SEXP XSEXP, SEXP max_iterSEXP, SEXP tolSEXP, SEXP ASEXP, SEXP in_E_inv_tau_sqSEXP, SEXP in_E_omegaSEXP, SEXP in_E_betaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fastBayesReg_fast_mfvb_normal_logit_try(ySEXP, XSEXP, max_iterSEXP, tolSEXP, ASEXP, in_E_inv_tau_sqSEXP, in_E_omegaSEXP, in_E_betaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// fast_mfvb_normal_logit_single
Rcpp::List fast_mfvb_normal_logit_single(arma::vec& y, arma::mat& X, int max_iter, double tol, double A, double in_E_inv_tau_sq, Rcpp::Nullable<Rcpp::NumericVector> in_E_omega, Rcpp::Nullable<Rcpp::NumericVector> in_E_beta);
static SEXP _fastBayesReg_fast_mfvb_normal_logit_single_try(SEXP ySEXP, SEXP XSEXP, SEXP max_iterSEXP, SEXP tolSEXP, SEXP ASEXP, SEXP in_E_inv_tau_sqSEXP, SEXP in_E_omegaSEXP, SEXP in_E_betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< double >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type in_E_inv_tau_sq(in_E_inv_tau_sqSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type in_E_omega(in_E_omegaSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type in_E_beta(in_E_betaSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_mfvb_normal_logit_single(y, X, max_iter, tol, A, in_E_inv_tau_sq, in_E_omega, in_E_beta));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fastBayesReg_fast_mfvb_normal_logit_single(SEXP ySEXP, SEXP XSEXP, SEXP max_iterSEXP, SEXP tolSEXP, SEXP ASEXP, SEXP in_E_inv_tau_sqSEXP, SEXP in_E_omegaSEXP, SEXP in_E_betaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fastBayesReg_fast_mfvb_normal_logit_single_try(ySEXP, XSEXP, max_iterSEXP, tolSEXP, ASEXP, in_E_inv_tau_sqSEXP, in_E_omegaSEXP, in_E_betaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// fast_mfvb_multiclass
Rcpp::List fast_mfvb_multiclass(arma::vec& y, arma::mat& X, int num_class, int mcmc_sample, int burnin, int thinning, double A_tau);
static SEXP _fastBayesReg_fast_mfvb_multiclass_try(SEXP ySEXP, SEXP XSEXP, SEXP num_classSEXP, SEXP mcmc_sampleSEXP, SEXP burninSEXP, SEXP thinningSEXP, SEXP A_tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type num_class(num_classSEXP);
    Rcpp::traits::input_parameter< int >::type mcmc_sample(mcmc_sampleSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< int >::type thinning(thinningSEXP);
    Rcpp::traits::input_parameter< double >::type A_tau(A_tauSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_mfvb_multiclass(y, X, num_class, mcmc_sample, burnin, thinning, A_tau));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fastBayesReg_fast_mfvb_multiclass(SEXP ySEXP, SEXP XSEXP, SEXP num_classSEXP, SEXP mcmc_sampleSEXP, SEXP burninSEXP, SEXP thinningSEXP, SEXP A_tauSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fastBayesReg_fast_mfvb_multiclass_try(ySEXP, XSEXP, num_classSEXP, mcmc_sampleSEXP, burninSEXP, thinningSEXP, A_tauSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// fast_horseshoe_logit
Rcpp::List fast_horseshoe_logit(arma::vec& y, arma::mat& X, int mcmc_sample, int burnin, int thinning, double A_tau, double A_lambda);
static SEXP _fastBayesReg_fast_horseshoe_logit_try(SEXP ySEXP, SEXP XSEXP, SEXP mcmc_sampleSEXP, SEXP burninSEXP, SEXP thinningSEXP, SEXP A_tauSEXP, SEXP A_lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type mcmc_sample(mcmc_sampleSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< int >::type thinning(thinningSEXP);
    Rcpp::traits::input_parameter< double >::type A_tau(A_tauSEXP);
    Rcpp::traits::input_parameter< double >::type A_lambda(A_lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_horseshoe_logit(y, X, mcmc_sample, burnin, thinning, A_tau, A_lambda));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fastBayesReg_fast_horseshoe_logit(SEXP ySEXP, SEXP XSEXP, SEXP mcmc_sampleSEXP, SEXP burninSEXP, SEXP thinningSEXP, SEXP A_tauSEXP, SEXP A_lambdaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fastBayesReg_fast_horseshoe_logit_try(ySEXP, XSEXP, mcmc_sampleSEXP, burninSEXP, thinningSEXP, A_tauSEXP, A_lambdaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// rand_left_trucnorm0
arma::vec rand_left_trucnorm0(int n, double lower, double ratio);
static SEXP _fastBayesReg_rand_left_trucnorm0_try(SEXP nSEXP, SEXP lowerSEXP, SEXP ratioSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type ratio(ratioSEXP);
    rcpp_result_gen = Rcpp::wrap(rand_left_trucnorm0(n, lower, ratio));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fastBayesReg_rand_left_trucnorm0(SEXP nSEXP, SEXP lowerSEXP, SEXP ratioSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fastBayesReg_rand_left_trucnorm0_try(nSEXP, lowerSEXP, ratioSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// rand_left_trucnorm
arma::vec rand_left_trucnorm(int n, double mu, double sigma, double lower, double ratio);
static SEXP _fastBayesReg_rand_left_trucnorm_try(SEXP nSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP lowerSEXP, SEXP ratioSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type ratio(ratioSEXP);
    rcpp_result_gen = Rcpp::wrap(rand_left_trucnorm(n, mu, sigma, lower, ratio));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fastBayesReg_rand_left_trucnorm(SEXP nSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP lowerSEXP, SEXP ratioSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fastBayesReg_rand_left_trucnorm_try(nSEXP, muSEXP, sigmaSEXP, lowerSEXP, ratioSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// rand_right_trucnorm
arma::vec rand_right_trucnorm(int n, double mu, double sigma, double upper, double ratio);
static SEXP _fastBayesReg_rand_right_trucnorm_try(SEXP nSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP upperSEXP, SEXP ratioSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< double >::type ratio(ratioSEXP);
    rcpp_result_gen = Rcpp::wrap(rand_right_trucnorm(n, mu, sigma, upper, ratio));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fastBayesReg_rand_right_trucnorm(SEXP nSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP upperSEXP, SEXP ratioSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fastBayesReg_rand_right_trucnorm_try(nSEXP, muSEXP, sigmaSEXP, upperSEXP, ratioSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// fast_horseshoe_lm
Rcpp::List fast_horseshoe_lm(arma::vec& y, arma::mat& X, int mcmc_sample, int burnin, int thinning, double a_sigma, double b_sigma, double A_tau, double A_lambda);
static SEXP _fastBayesReg_fast_horseshoe_lm_try(SEXP ySEXP, SEXP XSEXP, SEXP mcmc_sampleSEXP, SEXP burninSEXP, SEXP thinningSEXP, SEXP a_sigmaSEXP, SEXP b_sigmaSEXP, SEXP A_tauSEXP, SEXP A_lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type mcmc_sample(mcmc_sampleSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< int >::type thinning(thinningSEXP);
    Rcpp::traits::input_parameter< double >::type a_sigma(a_sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type b_sigma(b_sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type A_tau(A_tauSEXP);
    Rcpp::traits::input_parameter< double >::type A_lambda(A_lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_horseshoe_lm(y, X, mcmc_sample, burnin, thinning, a_sigma, b_sigma, A_tau, A_lambda));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fastBayesReg_fast_horseshoe_lm(SEXP ySEXP, SEXP XSEXP, SEXP mcmc_sampleSEXP, SEXP burninSEXP, SEXP thinningSEXP, SEXP a_sigmaSEXP, SEXP b_sigmaSEXP, SEXP A_tauSEXP, SEXP A_lambdaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fastBayesReg_fast_horseshoe_lm_try(ySEXP, XSEXP, mcmc_sampleSEXP, burninSEXP, thinningSEXP, a_sigmaSEXP, b_sigmaSEXP, A_tauSEXP, A_lambdaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// fast_horseshoe_ss_lm
Rcpp::List fast_horseshoe_ss_lm(arma::vec& y, arma::mat& X, int mcmc_sample, int burnin, int thinning, double a_sigma, double b_sigma, double A_tau, double A_lambda);
static SEXP _fastBayesReg_fast_horseshoe_ss_lm_try(SEXP ySEXP, SEXP XSEXP, SEXP mcmc_sampleSEXP, SEXP burninSEXP, SEXP thinningSEXP, SEXP a_sigmaSEXP, SEXP b_sigmaSEXP, SEXP A_tauSEXP, SEXP A_lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type mcmc_sample(mcmc_sampleSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< int >::type thinning(thinningSEXP);
    Rcpp::traits::input_parameter< double >::type a_sigma(a_sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type b_sigma(b_sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type A_tau(A_tauSEXP);
    Rcpp::traits::input_parameter< double >::type A_lambda(A_lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_horseshoe_ss_lm(y, X, mcmc_sample, burnin, thinning, a_sigma, b_sigma, A_tau, A_lambda));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fastBayesReg_fast_horseshoe_ss_lm(SEXP ySEXP, SEXP XSEXP, SEXP mcmc_sampleSEXP, SEXP burninSEXP, SEXP thinningSEXP, SEXP a_sigmaSEXP, SEXP b_sigmaSEXP, SEXP A_tauSEXP, SEXP A_lambdaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fastBayesReg_fast_horseshoe_ss_lm_try(ySEXP, XSEXP, mcmc_sampleSEXP, burninSEXP, thinningSEXP, a_sigmaSEXP, b_sigmaSEXP, A_tauSEXP, A_lambdaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// fast_horseshoe_hd_lm
Rcpp::List fast_horseshoe_hd_lm(arma::vec& y, arma::mat& X, int mcmc_sample, int burnin, int thinning, double a_sigma, double b_sigma, double A_tau, double A_lambda);
static SEXP _fastBayesReg_fast_horseshoe_hd_lm_try(SEXP ySEXP, SEXP XSEXP, SEXP mcmc_sampleSEXP, SEXP burninSEXP, SEXP thinningSEXP, SEXP a_sigmaSEXP, SEXP b_sigmaSEXP, SEXP A_tauSEXP, SEXP A_lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type mcmc_sample(mcmc_sampleSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< int >::type thinning(thinningSEXP);
    Rcpp::traits::input_parameter< double >::type a_sigma(a_sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type b_sigma(b_sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type A_tau(A_tauSEXP);
    Rcpp::traits::input_parameter< double >::type A_lambda(A_lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_horseshoe_hd_lm(y, X, mcmc_sample, burnin, thinning, a_sigma, b_sigma, A_tau, A_lambda));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fastBayesReg_fast_horseshoe_hd_lm(SEXP ySEXP, SEXP XSEXP, SEXP mcmc_sampleSEXP, SEXP burninSEXP, SEXP thinningSEXP, SEXP a_sigmaSEXP, SEXP b_sigmaSEXP, SEXP A_tauSEXP, SEXP A_lambdaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fastBayesReg_fast_horseshoe_hd_lm_try(ySEXP, XSEXP, mcmc_sampleSEXP, burninSEXP, thinningSEXP, a_sigmaSEXP, b_sigmaSEXP, A_tauSEXP, A_lambdaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// predict_fast_lm
Rcpp::List predict_fast_lm(Rcpp::List& model_fit, arma::mat& X_test, double alpha);
static SEXP _fastBayesReg_predict_fast_lm_try(SEXP model_fitSEXP, SEXP X_testSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::List& >::type model_fit(model_fitSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X_test(X_testSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(predict_fast_lm(model_fit, X_test, alpha));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fastBayesReg_predict_fast_lm(SEXP model_fitSEXP, SEXP X_testSEXP, SEXP alphaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fastBayesReg_predict_fast_lm_try(model_fitSEXP, X_testSEXP, alphaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// predict_fast_multi_lm
Rcpp::List predict_fast_multi_lm(Rcpp::List& model_fit, arma::mat& X_test);
static SEXP _fastBayesReg_predict_fast_multi_lm_try(SEXP model_fitSEXP, SEXP X_testSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::List& >::type model_fit(model_fitSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X_test(X_testSEXP);
    rcpp_result_gen = Rcpp::wrap(predict_fast_multi_lm(model_fit, X_test));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fastBayesReg_predict_fast_multi_lm(SEXP model_fitSEXP, SEXP X_testSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fastBayesReg_predict_fast_multi_lm_try(model_fitSEXP, X_testSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// predict_fast_mfvb_lm
Rcpp::List predict_fast_mfvb_lm(Rcpp::List& model_fit, arma::mat& X_test);
static SEXP _fastBayesReg_predict_fast_mfvb_lm_try(SEXP model_fitSEXP, SEXP X_testSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::List& >::type model_fit(model_fitSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X_test(X_testSEXP);
    rcpp_result_gen = Rcpp::wrap(predict_fast_mfvb_lm(model_fit, X_test));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fastBayesReg_predict_fast_mfvb_lm(SEXP model_fitSEXP, SEXP X_testSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fastBayesReg_predict_fast_mfvb_lm_try(model_fitSEXP, X_testSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// predict_fast_logit
Rcpp::List predict_fast_logit(Rcpp::List& model_fit, arma::mat& X_test, double alpha, double cutoff);
static SEXP _fastBayesReg_predict_fast_logit_try(SEXP model_fitSEXP, SEXP X_testSEXP, SEXP alphaSEXP, SEXP cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::List& >::type model_fit(model_fitSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X_test(X_testSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type cutoff(cutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(predict_fast_logit(model_fit, X_test, alpha, cutoff));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fastBayesReg_predict_fast_logit(SEXP model_fitSEXP, SEXP X_testSEXP, SEXP alphaSEXP, SEXP cutoffSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fastBayesReg_predict_fast_logit_try(model_fitSEXP, X_testSEXP, alphaSEXP, cutoffSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// predict_fast_multiclass
Rcpp::List predict_fast_multiclass(Rcpp::List& model_fit, arma::mat& X_test);
static SEXP _fastBayesReg_predict_fast_multiclass_try(SEXP model_fitSEXP, SEXP X_testSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::List& >::type model_fit(model_fitSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X_test(X_testSEXP);
    rcpp_result_gen = Rcpp::wrap(predict_fast_multiclass(model_fit, X_test));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fastBayesReg_predict_fast_multiclass(SEXP model_fitSEXP, SEXP X_testSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fastBayesReg_predict_fast_multiclass_try(model_fitSEXP, X_testSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// predict_fast_mfvb_logit
Rcpp::List predict_fast_mfvb_logit(Rcpp::List& model_fit, arma::mat& X_test, double alpha, double cutoff);
static SEXP _fastBayesReg_predict_fast_mfvb_logit_try(SEXP model_fitSEXP, SEXP X_testSEXP, SEXP alphaSEXP, SEXP cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::List& >::type model_fit(model_fitSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X_test(X_testSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type cutoff(cutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(predict_fast_mfvb_logit(model_fit, X_test, alpha, cutoff));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fastBayesReg_predict_fast_mfvb_logit(SEXP model_fitSEXP, SEXP X_testSEXP, SEXP alphaSEXP, SEXP cutoffSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fastBayesReg_predict_fast_mfvb_logit_try(model_fitSEXP, X_testSEXP, alphaSEXP, cutoffSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// fast_mfvb_normal_lm
Rcpp::List fast_mfvb_normal_lm(arma::vec& y, arma::mat& X, int max_iter, double a_sigma, double b_sigma, double A_tau, double tol, double t_sigma2_eps_0, double t_tau2_0);
static SEXP _fastBayesReg_fast_mfvb_normal_lm_try(SEXP ySEXP, SEXP XSEXP, SEXP max_iterSEXP, SEXP a_sigmaSEXP, SEXP b_sigmaSEXP, SEXP A_tauSEXP, SEXP tolSEXP, SEXP t_sigma2_eps_0SEXP, SEXP t_tau2_0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type a_sigma(a_sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type b_sigma(b_sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type A_tau(A_tauSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< double >::type t_sigma2_eps_0(t_sigma2_eps_0SEXP);
    Rcpp::traits::input_parameter< double >::type t_tau2_0(t_tau2_0SEXP);
    rcpp_result_gen = Rcpp::wrap(fast_mfvb_normal_lm(y, X, max_iter, a_sigma, b_sigma, A_tau, tol, t_sigma2_eps_0, t_tau2_0));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fastBayesReg_fast_mfvb_normal_lm(SEXP ySEXP, SEXP XSEXP, SEXP max_iterSEXP, SEXP a_sigmaSEXP, SEXP b_sigmaSEXP, SEXP A_tauSEXP, SEXP tolSEXP, SEXP t_sigma2_eps_0SEXP, SEXP t_tau2_0SEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fastBayesReg_fast_mfvb_normal_lm_try(ySEXP, XSEXP, max_iterSEXP, a_sigmaSEXP, b_sigmaSEXP, A_tauSEXP, tolSEXP, t_sigma2_eps_0SEXP, t_tau2_0SEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// Rcpp_optimize_H
double Rcpp_optimize_H(arma::mat& d_sq, arma::mat& z_sq);
static SEXP _fastBayesReg_Rcpp_optimize_H_try(SEXP d_sqSEXP, SEXP z_sqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type d_sq(d_sqSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type z_sq(z_sqSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_optimize_H(d_sq, z_sq));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fastBayesReg_Rcpp_optimize_H(SEXP d_sqSEXP, SEXP z_sqSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fastBayesReg_Rcpp_optimize_H_try(d_sqSEXP, z_sqSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// Rcpp_optimize_L
double Rcpp_optimize_L(arma::mat& d_sq, arma::mat& z_sq, double& sum_y_sq, int& n);
static SEXP _fastBayesReg_Rcpp_optimize_L_try(SEXP d_sqSEXP, SEXP z_sqSEXP, SEXP sum_y_sqSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type d_sq(d_sqSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type z_sq(z_sqSEXP);
    Rcpp::traits::input_parameter< double& >::type sum_y_sq(sum_y_sqSEXP);
    Rcpp::traits::input_parameter< int& >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_optimize_L(d_sq, z_sq, sum_y_sq, n));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fastBayesReg_Rcpp_optimize_L(SEXP d_sqSEXP, SEXP z_sqSEXP, SEXP sum_y_sqSEXP, SEXP nSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fastBayesReg_Rcpp_optimize_L_try(d_sqSEXP, z_sqSEXP, sum_y_sqSEXP, nSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// super_fast_normal_lm
Rcpp::List super_fast_normal_lm(arma::vec& y, arma::mat& X, double theta);
static SEXP _fastBayesReg_super_fast_normal_lm_try(SEXP ySEXP, SEXP XSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(super_fast_normal_lm(y, X, theta));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _fastBayesReg_super_fast_normal_lm(SEXP ySEXP, SEXP XSEXP, SEXP thetaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_fastBayesReg_super_fast_normal_lm_try(ySEXP, XSEXP, thetaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int _fastBayesReg_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("arma::vec(*log1mexpm)(arma::vec&)");
        signatures.insert("arma::vec(*log1pexp)(arma::vec&)");
        signatures.insert("arma::mat(*log1pexp_mat)(arma::mat&)");
        signatures.insert("Rcpp::List(*sim_linear_reg)(int,int,int,double,double,double)");
        signatures.insert("Rcpp::List(*sim_linear_reg_multi)(int,int,int,int,double,double,double)");
        signatures.insert("Rcpp::List(*sim_logit_reg)(int,int,int,double,double,double,double)");
        signatures.insert("Rcpp::List(*sim_multiclass_reg)(int,int,int,int,double,double,double,double,Rcpp::Nullable<Rcpp::NumericMatrix>)");
        signatures.insert("Rcpp::List(*fast_normal_lm)(arma::vec&,arma::mat&,int,int,int,double,double,double)");
        signatures.insert("arma::mat(*special_rmvnorm)(int,arma::vec&,arma::mat&)");
        signatures.insert("Rcpp::List(*fast_normal_lm_sel)(arma::vec&,arma::mat&,int,int,int,double,double,double,double)");
        signatures.insert("Rcpp::List(*fast_normal_multi_lm)(arma::mat&,arma::mat&,int,int,int,double,double,double,bool,bool)");
        signatures.insert("Rcpp::List(*fast_normal_logit)(arma::vec&,arma::mat&,int,int,int,double)");
        signatures.insert("Rcpp::List(*fast_normal_logit_single_gibbs)(arma::vec&,arma::mat&,int,int,int,double,int)");
        signatures.insert("Rcpp::List(*scalable_normal_logit_single_gibbs)(arma::vec&,SEXP,arma::uvec&,int,int,int,double,int)");
        signatures.insert("Rcpp::List(*big_normal_logit_single_gibbs)(arma::vec&,SEXP,int,int,int,double,int)");
        signatures.insert("Rcpp::List(*sparse_normal_logit_single_gibbs)(arma::vec&,arma::sp_mat&,int,int,int,double,int)");
        signatures.insert("Rcpp::List(*fast_normal_multiclass)(arma::vec&,arma::mat&,int,int,int,int,double)");
        signatures.insert("Rcpp::List(*fast_normal_multiclass_single_gibbs)(arma::vec&,arma::mat&,int,int,int,int,double,int)");
        signatures.insert("Rcpp::List(*scalable_normal_multiclass_single_gibbs)(arma::vec&,arma::mat&,int,int,int,int,double,int)");
        signatures.insert("Rcpp::List(*fast_mfvb_normal_logit)(arma::vec&,arma::mat&,int,double,double,double,Rcpp::Nullable<Rcpp::NumericVector>,Rcpp::Nullable<Rcpp::NumericVector>)");
        signatures.insert("Rcpp::List(*fast_mfvb_normal_logit_single)(arma::vec&,arma::mat&,int,double,double,double,Rcpp::Nullable<Rcpp::NumericVector>,Rcpp::Nullable<Rcpp::NumericVector>)");
        signatures.insert("Rcpp::List(*fast_mfvb_multiclass)(arma::vec&,arma::mat&,int,int,int,int,double)");
        signatures.insert("Rcpp::List(*fast_horseshoe_logit)(arma::vec&,arma::mat&,int,int,int,double,double)");
        signatures.insert("arma::vec(*rand_left_trucnorm0)(int,double,double)");
        signatures.insert("arma::vec(*rand_left_trucnorm)(int,double,double,double,double)");
        signatures.insert("arma::vec(*rand_right_trucnorm)(int,double,double,double,double)");
        signatures.insert("Rcpp::List(*fast_horseshoe_lm)(arma::vec&,arma::mat&,int,int,int,double,double,double,double)");
        signatures.insert("Rcpp::List(*fast_horseshoe_ss_lm)(arma::vec&,arma::mat&,int,int,int,double,double,double,double)");
        signatures.insert("Rcpp::List(*fast_horseshoe_hd_lm)(arma::vec&,arma::mat&,int,int,int,double,double,double,double)");
        signatures.insert("Rcpp::List(*predict_fast_lm)(Rcpp::List&,arma::mat&,double)");
        signatures.insert("Rcpp::List(*predict_fast_multi_lm)(Rcpp::List&,arma::mat&)");
        signatures.insert("Rcpp::List(*predict_fast_mfvb_lm)(Rcpp::List&,arma::mat&)");
        signatures.insert("Rcpp::List(*predict_fast_logit)(Rcpp::List&,arma::mat&,double,double)");
        signatures.insert("Rcpp::List(*predict_fast_multiclass)(Rcpp::List&,arma::mat&)");
        signatures.insert("Rcpp::List(*predict_fast_mfvb_logit)(Rcpp::List&,arma::mat&,double,double)");
        signatures.insert("Rcpp::List(*fast_mfvb_normal_lm)(arma::vec&,arma::mat&,int,double,double,double,double,double,double)");
        signatures.insert("double(*Rcpp_optimize_H)(arma::mat&,arma::mat&)");
        signatures.insert("double(*Rcpp_optimize_L)(arma::mat&,arma::mat&,double&,int&)");
        signatures.insert("Rcpp::List(*super_fast_normal_lm)(arma::vec&,arma::mat&,double)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _fastBayesReg_RcppExport_registerCCallable() { 
    R_RegisterCCallable("fastBayesReg", "_fastBayesReg_log1mexpm", (DL_FUNC)_fastBayesReg_log1mexpm_try);
    R_RegisterCCallable("fastBayesReg", "_fastBayesReg_log1pexp", (DL_FUNC)_fastBayesReg_log1pexp_try);
    R_RegisterCCallable("fastBayesReg", "_fastBayesReg_log1pexp_mat", (DL_FUNC)_fastBayesReg_log1pexp_mat_try);
    R_RegisterCCallable("fastBayesReg", "_fastBayesReg_sim_linear_reg", (DL_FUNC)_fastBayesReg_sim_linear_reg_try);
    R_RegisterCCallable("fastBayesReg", "_fastBayesReg_sim_linear_reg_multi", (DL_FUNC)_fastBayesReg_sim_linear_reg_multi_try);
    R_RegisterCCallable("fastBayesReg", "_fastBayesReg_sim_logit_reg", (DL_FUNC)_fastBayesReg_sim_logit_reg_try);
    R_RegisterCCallable("fastBayesReg", "_fastBayesReg_sim_multiclass_reg", (DL_FUNC)_fastBayesReg_sim_multiclass_reg_try);
    R_RegisterCCallable("fastBayesReg", "_fastBayesReg_fast_normal_lm", (DL_FUNC)_fastBayesReg_fast_normal_lm_try);
    R_RegisterCCallable("fastBayesReg", "_fastBayesReg_special_rmvnorm", (DL_FUNC)_fastBayesReg_special_rmvnorm_try);
    R_RegisterCCallable("fastBayesReg", "_fastBayesReg_fast_normal_lm_sel", (DL_FUNC)_fastBayesReg_fast_normal_lm_sel_try);
    R_RegisterCCallable("fastBayesReg", "_fastBayesReg_fast_normal_multi_lm", (DL_FUNC)_fastBayesReg_fast_normal_multi_lm_try);
    R_RegisterCCallable("fastBayesReg", "_fastBayesReg_fast_normal_logit", (DL_FUNC)_fastBayesReg_fast_normal_logit_try);
    R_RegisterCCallable("fastBayesReg", "_fastBayesReg_fast_normal_logit_single_gibbs", (DL_FUNC)_fastBayesReg_fast_normal_logit_single_gibbs_try);
    R_RegisterCCallable("fastBayesReg", "_fastBayesReg_scalable_normal_logit_single_gibbs", (DL_FUNC)_fastBayesReg_scalable_normal_logit_single_gibbs_try);
    R_RegisterCCallable("fastBayesReg", "_fastBayesReg_big_normal_logit_single_gibbs", (DL_FUNC)_fastBayesReg_big_normal_logit_single_gibbs_try);
    R_RegisterCCallable("fastBayesReg", "_fastBayesReg_sparse_normal_logit_single_gibbs", (DL_FUNC)_fastBayesReg_sparse_normal_logit_single_gibbs_try);
    R_RegisterCCallable("fastBayesReg", "_fastBayesReg_fast_normal_multiclass", (DL_FUNC)_fastBayesReg_fast_normal_multiclass_try);
    R_RegisterCCallable("fastBayesReg", "_fastBayesReg_fast_normal_multiclass_single_gibbs", (DL_FUNC)_fastBayesReg_fast_normal_multiclass_single_gibbs_try);
    R_RegisterCCallable("fastBayesReg", "_fastBayesReg_scalable_normal_multiclass_single_gibbs", (DL_FUNC)_fastBayesReg_scalable_normal_multiclass_single_gibbs_try);
    R_RegisterCCallable("fastBayesReg", "_fastBayesReg_fast_mfvb_normal_logit", (DL_FUNC)_fastBayesReg_fast_mfvb_normal_logit_try);
    R_RegisterCCallable("fastBayesReg", "_fastBayesReg_fast_mfvb_normal_logit_single", (DL_FUNC)_fastBayesReg_fast_mfvb_normal_logit_single_try);
    R_RegisterCCallable("fastBayesReg", "_fastBayesReg_fast_mfvb_multiclass", (DL_FUNC)_fastBayesReg_fast_mfvb_multiclass_try);
    R_RegisterCCallable("fastBayesReg", "_fastBayesReg_fast_horseshoe_logit", (DL_FUNC)_fastBayesReg_fast_horseshoe_logit_try);
    R_RegisterCCallable("fastBayesReg", "_fastBayesReg_rand_left_trucnorm0", (DL_FUNC)_fastBayesReg_rand_left_trucnorm0_try);
    R_RegisterCCallable("fastBayesReg", "_fastBayesReg_rand_left_trucnorm", (DL_FUNC)_fastBayesReg_rand_left_trucnorm_try);
    R_RegisterCCallable("fastBayesReg", "_fastBayesReg_rand_right_trucnorm", (DL_FUNC)_fastBayesReg_rand_right_trucnorm_try);
    R_RegisterCCallable("fastBayesReg", "_fastBayesReg_fast_horseshoe_lm", (DL_FUNC)_fastBayesReg_fast_horseshoe_lm_try);
    R_RegisterCCallable("fastBayesReg", "_fastBayesReg_fast_horseshoe_ss_lm", (DL_FUNC)_fastBayesReg_fast_horseshoe_ss_lm_try);
    R_RegisterCCallable("fastBayesReg", "_fastBayesReg_fast_horseshoe_hd_lm", (DL_FUNC)_fastBayesReg_fast_horseshoe_hd_lm_try);
    R_RegisterCCallable("fastBayesReg", "_fastBayesReg_predict_fast_lm", (DL_FUNC)_fastBayesReg_predict_fast_lm_try);
    R_RegisterCCallable("fastBayesReg", "_fastBayesReg_predict_fast_multi_lm", (DL_FUNC)_fastBayesReg_predict_fast_multi_lm_try);
    R_RegisterCCallable("fastBayesReg", "_fastBayesReg_predict_fast_mfvb_lm", (DL_FUNC)_fastBayesReg_predict_fast_mfvb_lm_try);
    R_RegisterCCallable("fastBayesReg", "_fastBayesReg_predict_fast_logit", (DL_FUNC)_fastBayesReg_predict_fast_logit_try);
    R_RegisterCCallable("fastBayesReg", "_fastBayesReg_predict_fast_multiclass", (DL_FUNC)_fastBayesReg_predict_fast_multiclass_try);
    R_RegisterCCallable("fastBayesReg", "_fastBayesReg_predict_fast_mfvb_logit", (DL_FUNC)_fastBayesReg_predict_fast_mfvb_logit_try);
    R_RegisterCCallable("fastBayesReg", "_fastBayesReg_fast_mfvb_normal_lm", (DL_FUNC)_fastBayesReg_fast_mfvb_normal_lm_try);
    R_RegisterCCallable("fastBayesReg", "_fastBayesReg_Rcpp_optimize_H", (DL_FUNC)_fastBayesReg_Rcpp_optimize_H_try);
    R_RegisterCCallable("fastBayesReg", "_fastBayesReg_Rcpp_optimize_L", (DL_FUNC)_fastBayesReg_Rcpp_optimize_L_try);
    R_RegisterCCallable("fastBayesReg", "_fastBayesReg_super_fast_normal_lm", (DL_FUNC)_fastBayesReg_super_fast_normal_lm_try);
    R_RegisterCCallable("fastBayesReg", "_fastBayesReg_RcppExport_validate", (DL_FUNC)_fastBayesReg_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_fastBayesReg_log1mexpm", (DL_FUNC) &_fastBayesReg_log1mexpm, 1},
    {"_fastBayesReg_log1pexp", (DL_FUNC) &_fastBayesReg_log1pexp, 1},
    {"_fastBayesReg_log1pexp_mat", (DL_FUNC) &_fastBayesReg_log1pexp_mat, 1},
    {"_fastBayesReg_sim_linear_reg", (DL_FUNC) &_fastBayesReg_sim_linear_reg, 6},
    {"_fastBayesReg_sim_linear_reg_multi", (DL_FUNC) &_fastBayesReg_sim_linear_reg_multi, 7},
    {"_fastBayesReg_sim_logit_reg", (DL_FUNC) &_fastBayesReg_sim_logit_reg, 7},
    {"_fastBayesReg_sim_multiclass_reg", (DL_FUNC) &_fastBayesReg_sim_multiclass_reg, 9},
    {"_fastBayesReg_fast_normal_lm", (DL_FUNC) &_fastBayesReg_fast_normal_lm, 8},
    {"_fastBayesReg_special_rmvnorm", (DL_FUNC) &_fastBayesReg_special_rmvnorm, 3},
    {"_fastBayesReg_fast_normal_lm_sel", (DL_FUNC) &_fastBayesReg_fast_normal_lm_sel, 9},
    {"_fastBayesReg_fast_normal_multi_lm", (DL_FUNC) &_fastBayesReg_fast_normal_multi_lm, 10},
    {"_fastBayesReg_fast_normal_logit", (DL_FUNC) &_fastBayesReg_fast_normal_logit, 6},
    {"_fastBayesReg_fast_normal_logit_single_gibbs", (DL_FUNC) &_fastBayesReg_fast_normal_logit_single_gibbs, 7},
    {"_fastBayesReg_scalable_normal_logit_single_gibbs", (DL_FUNC) &_fastBayesReg_scalable_normal_logit_single_gibbs, 8},
    {"_fastBayesReg_big_normal_logit_single_gibbs", (DL_FUNC) &_fastBayesReg_big_normal_logit_single_gibbs, 7},
    {"_fastBayesReg_sparse_normal_logit_single_gibbs", (DL_FUNC) &_fastBayesReg_sparse_normal_logit_single_gibbs, 7},
    {"_fastBayesReg_fast_normal_multiclass", (DL_FUNC) &_fastBayesReg_fast_normal_multiclass, 7},
    {"_fastBayesReg_fast_normal_multiclass_single_gibbs", (DL_FUNC) &_fastBayesReg_fast_normal_multiclass_single_gibbs, 8},
    {"_fastBayesReg_scalable_normal_multiclass_single_gibbs", (DL_FUNC) &_fastBayesReg_scalable_normal_multiclass_single_gibbs, 8},
    {"_fastBayesReg_fast_mfvb_normal_logit", (DL_FUNC) &_fastBayesReg_fast_mfvb_normal_logit, 8},
    {"_fastBayesReg_fast_mfvb_normal_logit_single", (DL_FUNC) &_fastBayesReg_fast_mfvb_normal_logit_single, 8},
    {"_fastBayesReg_fast_mfvb_multiclass", (DL_FUNC) &_fastBayesReg_fast_mfvb_multiclass, 7},
    {"_fastBayesReg_fast_horseshoe_logit", (DL_FUNC) &_fastBayesReg_fast_horseshoe_logit, 7},
    {"_fastBayesReg_rand_left_trucnorm0", (DL_FUNC) &_fastBayesReg_rand_left_trucnorm0, 3},
    {"_fastBayesReg_rand_left_trucnorm", (DL_FUNC) &_fastBayesReg_rand_left_trucnorm, 5},
    {"_fastBayesReg_rand_right_trucnorm", (DL_FUNC) &_fastBayesReg_rand_right_trucnorm, 5},
    {"_fastBayesReg_fast_horseshoe_lm", (DL_FUNC) &_fastBayesReg_fast_horseshoe_lm, 9},
    {"_fastBayesReg_fast_horseshoe_ss_lm", (DL_FUNC) &_fastBayesReg_fast_horseshoe_ss_lm, 9},
    {"_fastBayesReg_fast_horseshoe_hd_lm", (DL_FUNC) &_fastBayesReg_fast_horseshoe_hd_lm, 9},
    {"_fastBayesReg_predict_fast_lm", (DL_FUNC) &_fastBayesReg_predict_fast_lm, 3},
    {"_fastBayesReg_predict_fast_multi_lm", (DL_FUNC) &_fastBayesReg_predict_fast_multi_lm, 2},
    {"_fastBayesReg_predict_fast_mfvb_lm", (DL_FUNC) &_fastBayesReg_predict_fast_mfvb_lm, 2},
    {"_fastBayesReg_predict_fast_logit", (DL_FUNC) &_fastBayesReg_predict_fast_logit, 4},
    {"_fastBayesReg_predict_fast_multiclass", (DL_FUNC) &_fastBayesReg_predict_fast_multiclass, 2},
    {"_fastBayesReg_predict_fast_mfvb_logit", (DL_FUNC) &_fastBayesReg_predict_fast_mfvb_logit, 4},
    {"_fastBayesReg_fast_mfvb_normal_lm", (DL_FUNC) &_fastBayesReg_fast_mfvb_normal_lm, 9},
    {"_fastBayesReg_Rcpp_optimize_H", (DL_FUNC) &_fastBayesReg_Rcpp_optimize_H, 2},
    {"_fastBayesReg_Rcpp_optimize_L", (DL_FUNC) &_fastBayesReg_Rcpp_optimize_L, 4},
    {"_fastBayesReg_super_fast_normal_lm", (DL_FUNC) &_fastBayesReg_super_fast_normal_lm, 3},
    {"_fastBayesReg_RcppExport_registerCCallable", (DL_FUNC) &_fastBayesReg_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_fastBayesReg(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
