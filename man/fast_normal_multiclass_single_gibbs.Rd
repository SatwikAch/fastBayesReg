% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{fast_normal_multiclass_single_gibbs}
\alias{fast_normal_multiclass_single_gibbs}
\title{Fast Bayesian multinomial logistic regression with normal priors using single gibbs samplers}
\usage{
fast_normal_multiclass_single_gibbs(
  y,
  X,
  num_class,
  mcmc_sample = 500L,
  burnin = 500L,
  thinning = 1L,
  A_tau = 1,
  verbose = 0L
)
}
\arguments{
\item{y}{vector of n multiclass outcome variables taking values 0,...,M-1}

\item{X}{n x p matrix of candidate predictors}

\item{num_class}{an integer indicating the number of classes}

\item{mcmc_sample}{number of MCMC iterations saved}

\item{burnin}{number of iterations before start to save}

\item{thinning}{number of iterations to skip between two saved iterations}

\item{A_tau}{scale parameter in the half Cauchy prior of the ratio between the coefficient variance and the noise variance}
}
\value{
a list object consisting of three components
\describe{
\item{post_mean}{a list object of four components for posterior mean statistics}
\describe{
\item{betacoef}{a vector of posterior mean of p regression coeficients}
\item{tau2}{posterior mean of the ratio between prior regression coefficient variances and the noise variance}
\item{mu}{a vector of posterior predictive mean for linear predictor of the n training sample}
\item{prob}{a vector of posterior predictive probability of the n training sample}
}
\item{mcmc}{a list object of three components for MCMC samples}
\describe{
\item{betacoef}{a matrix of MCMC samples for p regression coeficients. Each column is one MCMC sample}
\item{tau2}{a vector of MCMC samples of global shrinkage parameters}
}
\item{elapsed}{running time}
}
}
\description{
Fast Bayesian multinomial logistic regression with normal priors using single gibbs samplers
}
\examples{
set.seed(2022)
dat<-sim_multiclass_reg(K=5,n=1000,p=20,X_var = 10,X_cor=0.5,q=10,beta_size=1,intercept0=c(5,-5,-10,-10))
glmnet_res <- with(dat,wrap_glmnet(y,cbind(1,X),family="multinomial"))
Bayes_res <- with(dat,fast_normal_multiclass_single_gibbs(y,cbind(1,X),num_class=length(unique(y)),burnin=5000))
glmnet_pred <- as.numeric(predict(glmnet_res$glmnet_fit,newx = cbind(1,dat$X),type = "class"))
Bayes_pred <- apply(Bayes_res$post_mean$prob,1,which.max)-1
print(c(glmnet_acc = mean(glmnet_pred==dat$y),Bayes_acc = mean(Bayes_pred==dat$y)))
}
\author{
Jian Kang <jiankang@umich.edu>
}
