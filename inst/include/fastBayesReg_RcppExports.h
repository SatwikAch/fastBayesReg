// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_fastBayesReg_RCPPEXPORTS_H_GEN_
#define RCPP_fastBayesReg_RCPPEXPORTS_H_GEN_

#include <RcppArmadillo.h>
#include <Rcpp.h>

namespace fastBayesReg {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("fastBayesReg", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("fastBayesReg", "_fastBayesReg_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in fastBayesReg");
            }
        }
    }

    inline arma::vec log1mexpm(arma::vec& x) {
        typedef SEXP(*Ptr_log1mexpm)(SEXP);
        static Ptr_log1mexpm p_log1mexpm = NULL;
        if (p_log1mexpm == NULL) {
            validateSignature("arma::vec(*log1mexpm)(arma::vec&)");
            p_log1mexpm = (Ptr_log1mexpm)R_GetCCallable("fastBayesReg", "_fastBayesReg_log1mexpm");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_log1mexpm(Shield<SEXP>(Rcpp::wrap(x)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::vec >(rcpp_result_gen);
    }

    inline arma::vec log1pexp(arma::vec& x) {
        typedef SEXP(*Ptr_log1pexp)(SEXP);
        static Ptr_log1pexp p_log1pexp = NULL;
        if (p_log1pexp == NULL) {
            validateSignature("arma::vec(*log1pexp)(arma::vec&)");
            p_log1pexp = (Ptr_log1pexp)R_GetCCallable("fastBayesReg", "_fastBayesReg_log1pexp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_log1pexp(Shield<SEXP>(Rcpp::wrap(x)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::vec >(rcpp_result_gen);
    }

    inline arma::mat log1pexp_mat(arma::mat& x) {
        typedef SEXP(*Ptr_log1pexp_mat)(SEXP);
        static Ptr_log1pexp_mat p_log1pexp_mat = NULL;
        if (p_log1pexp_mat == NULL) {
            validateSignature("arma::mat(*log1pexp_mat)(arma::mat&)");
            p_log1pexp_mat = (Ptr_log1pexp_mat)R_GetCCallable("fastBayesReg", "_fastBayesReg_log1pexp_mat");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_log1pexp_mat(Shield<SEXP>(Rcpp::wrap(x)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::mat >(rcpp_result_gen);
    }

    inline Rcpp::List sim_linear_reg(int n = 100, int p = 20, int q = 5, double R2 = 0.95, double X_cor = 0.5, double beta_size = 1) {
        typedef SEXP(*Ptr_sim_linear_reg)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_sim_linear_reg p_sim_linear_reg = NULL;
        if (p_sim_linear_reg == NULL) {
            validateSignature("Rcpp::List(*sim_linear_reg)(int,int,int,double,double,double)");
            p_sim_linear_reg = (Ptr_sim_linear_reg)R_GetCCallable("fastBayesReg", "_fastBayesReg_sim_linear_reg");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_sim_linear_reg(Shield<SEXP>(Rcpp::wrap(n)), Shield<SEXP>(Rcpp::wrap(p)), Shield<SEXP>(Rcpp::wrap(q)), Shield<SEXP>(Rcpp::wrap(R2)), Shield<SEXP>(Rcpp::wrap(X_cor)), Shield<SEXP>(Rcpp::wrap(beta_size)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List sim_linear_reg_multi(int n = 100, int p = 20, int m = 5, int q = 5, double R2 = 0.95, double X_cor = 0.5, double beta_size = 1) {
        typedef SEXP(*Ptr_sim_linear_reg_multi)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_sim_linear_reg_multi p_sim_linear_reg_multi = NULL;
        if (p_sim_linear_reg_multi == NULL) {
            validateSignature("Rcpp::List(*sim_linear_reg_multi)(int,int,int,int,double,double,double)");
            p_sim_linear_reg_multi = (Ptr_sim_linear_reg_multi)R_GetCCallable("fastBayesReg", "_fastBayesReg_sim_linear_reg_multi");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_sim_linear_reg_multi(Shield<SEXP>(Rcpp::wrap(n)), Shield<SEXP>(Rcpp::wrap(p)), Shield<SEXP>(Rcpp::wrap(m)), Shield<SEXP>(Rcpp::wrap(q)), Shield<SEXP>(Rcpp::wrap(R2)), Shield<SEXP>(Rcpp::wrap(X_cor)), Shield<SEXP>(Rcpp::wrap(beta_size)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List sim_logit_reg(int n = 100, int p = 20, int q = 5, double X_cor = 0.5, double X_var = 10, double beta_size = 1, double density = 1.0) {
        typedef SEXP(*Ptr_sim_logit_reg)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_sim_logit_reg p_sim_logit_reg = NULL;
        if (p_sim_logit_reg == NULL) {
            validateSignature("Rcpp::List(*sim_logit_reg)(int,int,int,double,double,double,double)");
            p_sim_logit_reg = (Ptr_sim_logit_reg)R_GetCCallable("fastBayesReg", "_fastBayesReg_sim_logit_reg");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_sim_logit_reg(Shield<SEXP>(Rcpp::wrap(n)), Shield<SEXP>(Rcpp::wrap(p)), Shield<SEXP>(Rcpp::wrap(q)), Shield<SEXP>(Rcpp::wrap(X_cor)), Shield<SEXP>(Rcpp::wrap(X_var)), Shield<SEXP>(Rcpp::wrap(beta_size)), Shield<SEXP>(Rcpp::wrap(density)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List sim_multiclass_reg(int K = 5, int n = 100, int p = 20, int q = 5, double X_cor = 0.5, double X_var = 10, double beta_size = 1, double intercept_size = 1, Rcpp::Nullable<Rcpp::NumericMatrix> intercept0 = R_NilValue) {
        typedef SEXP(*Ptr_sim_multiclass_reg)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_sim_multiclass_reg p_sim_multiclass_reg = NULL;
        if (p_sim_multiclass_reg == NULL) {
            validateSignature("Rcpp::List(*sim_multiclass_reg)(int,int,int,int,double,double,double,double,Rcpp::Nullable<Rcpp::NumericMatrix>)");
            p_sim_multiclass_reg = (Ptr_sim_multiclass_reg)R_GetCCallable("fastBayesReg", "_fastBayesReg_sim_multiclass_reg");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_sim_multiclass_reg(Shield<SEXP>(Rcpp::wrap(K)), Shield<SEXP>(Rcpp::wrap(n)), Shield<SEXP>(Rcpp::wrap(p)), Shield<SEXP>(Rcpp::wrap(q)), Shield<SEXP>(Rcpp::wrap(X_cor)), Shield<SEXP>(Rcpp::wrap(X_var)), Shield<SEXP>(Rcpp::wrap(beta_size)), Shield<SEXP>(Rcpp::wrap(intercept_size)), Shield<SEXP>(Rcpp::wrap(intercept0)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List fast_normal_lm(arma::vec& y, arma::mat& X, int mcmc_sample = 500, int burnin = 500, int thinning = 1, double a_sigma = 0.01, double b_sigma = 0.01, double A_tau = 10) {
        typedef SEXP(*Ptr_fast_normal_lm)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_fast_normal_lm p_fast_normal_lm = NULL;
        if (p_fast_normal_lm == NULL) {
            validateSignature("Rcpp::List(*fast_normal_lm)(arma::vec&,arma::mat&,int,int,int,double,double,double)");
            p_fast_normal_lm = (Ptr_fast_normal_lm)R_GetCCallable("fastBayesReg", "_fastBayesReg_fast_normal_lm");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_fast_normal_lm(Shield<SEXP>(Rcpp::wrap(y)), Shield<SEXP>(Rcpp::wrap(X)), Shield<SEXP>(Rcpp::wrap(mcmc_sample)), Shield<SEXP>(Rcpp::wrap(burnin)), Shield<SEXP>(Rcpp::wrap(thinning)), Shield<SEXP>(Rcpp::wrap(a_sigma)), Shield<SEXP>(Rcpp::wrap(b_sigma)), Shield<SEXP>(Rcpp::wrap(A_tau)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline arma::mat special_rmvnorm(int n, arma::vec& mu, arma::mat& Omega) {
        typedef SEXP(*Ptr_special_rmvnorm)(SEXP,SEXP,SEXP);
        static Ptr_special_rmvnorm p_special_rmvnorm = NULL;
        if (p_special_rmvnorm == NULL) {
            validateSignature("arma::mat(*special_rmvnorm)(int,arma::vec&,arma::mat&)");
            p_special_rmvnorm = (Ptr_special_rmvnorm)R_GetCCallable("fastBayesReg", "_fastBayesReg_special_rmvnorm");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_special_rmvnorm(Shield<SEXP>(Rcpp::wrap(n)), Shield<SEXP>(Rcpp::wrap(mu)), Shield<SEXP>(Rcpp::wrap(Omega)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::mat >(rcpp_result_gen);
    }

    inline Rcpp::List fast_normal_lm_sel(arma::vec& y, arma::mat& X, int mcmc_sample = 500, int burnin = 500, int thinning = 1, double a_sigma = 0.01, double b_sigma = 0.01, double A_tau = 10, double sel_thres = 0.5) {
        typedef SEXP(*Ptr_fast_normal_lm_sel)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_fast_normal_lm_sel p_fast_normal_lm_sel = NULL;
        if (p_fast_normal_lm_sel == NULL) {
            validateSignature("Rcpp::List(*fast_normal_lm_sel)(arma::vec&,arma::mat&,int,int,int,double,double,double,double)");
            p_fast_normal_lm_sel = (Ptr_fast_normal_lm_sel)R_GetCCallable("fastBayesReg", "_fastBayesReg_fast_normal_lm_sel");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_fast_normal_lm_sel(Shield<SEXP>(Rcpp::wrap(y)), Shield<SEXP>(Rcpp::wrap(X)), Shield<SEXP>(Rcpp::wrap(mcmc_sample)), Shield<SEXP>(Rcpp::wrap(burnin)), Shield<SEXP>(Rcpp::wrap(thinning)), Shield<SEXP>(Rcpp::wrap(a_sigma)), Shield<SEXP>(Rcpp::wrap(b_sigma)), Shield<SEXP>(Rcpp::wrap(A_tau)), Shield<SEXP>(Rcpp::wrap(sel_thres)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List fast_normal_multi_lm(arma::mat& y, arma::mat& X, int mcmc_sample = 500, int burnin = 500, int thinning = 1, double a_sigma = 0.01, double b_sigma = 0.01, double A_tau = 10, bool mcmc_output = true) {
        typedef SEXP(*Ptr_fast_normal_multi_lm)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_fast_normal_multi_lm p_fast_normal_multi_lm = NULL;
        if (p_fast_normal_multi_lm == NULL) {
            validateSignature("Rcpp::List(*fast_normal_multi_lm)(arma::mat&,arma::mat&,int,int,int,double,double,double,bool)");
            p_fast_normal_multi_lm = (Ptr_fast_normal_multi_lm)R_GetCCallable("fastBayesReg", "_fastBayesReg_fast_normal_multi_lm");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_fast_normal_multi_lm(Shield<SEXP>(Rcpp::wrap(y)), Shield<SEXP>(Rcpp::wrap(X)), Shield<SEXP>(Rcpp::wrap(mcmc_sample)), Shield<SEXP>(Rcpp::wrap(burnin)), Shield<SEXP>(Rcpp::wrap(thinning)), Shield<SEXP>(Rcpp::wrap(a_sigma)), Shield<SEXP>(Rcpp::wrap(b_sigma)), Shield<SEXP>(Rcpp::wrap(A_tau)), Shield<SEXP>(Rcpp::wrap(mcmc_output)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List fast_normal_logit(arma::vec& y, arma::mat& X, int mcmc_sample = 500, int burnin = 500, int thinning = 1, double A_tau = 1) {
        typedef SEXP(*Ptr_fast_normal_logit)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_fast_normal_logit p_fast_normal_logit = NULL;
        if (p_fast_normal_logit == NULL) {
            validateSignature("Rcpp::List(*fast_normal_logit)(arma::vec&,arma::mat&,int,int,int,double)");
            p_fast_normal_logit = (Ptr_fast_normal_logit)R_GetCCallable("fastBayesReg", "_fastBayesReg_fast_normal_logit");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_fast_normal_logit(Shield<SEXP>(Rcpp::wrap(y)), Shield<SEXP>(Rcpp::wrap(X)), Shield<SEXP>(Rcpp::wrap(mcmc_sample)), Shield<SEXP>(Rcpp::wrap(burnin)), Shield<SEXP>(Rcpp::wrap(thinning)), Shield<SEXP>(Rcpp::wrap(A_tau)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List fast_normal_logit_single_gibbs(arma::vec& y, arma::mat& X, int mcmc_sample = 500, int burnin = 500, int thinning = 1, double A_tau = 1, int verbose = 0) {
        typedef SEXP(*Ptr_fast_normal_logit_single_gibbs)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_fast_normal_logit_single_gibbs p_fast_normal_logit_single_gibbs = NULL;
        if (p_fast_normal_logit_single_gibbs == NULL) {
            validateSignature("Rcpp::List(*fast_normal_logit_single_gibbs)(arma::vec&,arma::mat&,int,int,int,double,int)");
            p_fast_normal_logit_single_gibbs = (Ptr_fast_normal_logit_single_gibbs)R_GetCCallable("fastBayesReg", "_fastBayesReg_fast_normal_logit_single_gibbs");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_fast_normal_logit_single_gibbs(Shield<SEXP>(Rcpp::wrap(y)), Shield<SEXP>(Rcpp::wrap(X)), Shield<SEXP>(Rcpp::wrap(mcmc_sample)), Shield<SEXP>(Rcpp::wrap(burnin)), Shield<SEXP>(Rcpp::wrap(thinning)), Shield<SEXP>(Rcpp::wrap(A_tau)), Shield<SEXP>(Rcpp::wrap(verbose)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List scalable_normal_logit_single_gibbs(arma::vec& y, SEXP bigX, arma::uvec& rowidx, int mcmc_sample = 500, int burnin = 500, int thinning = 1, double A_tau = 1, int verbose = 0) {
        typedef SEXP(*Ptr_scalable_normal_logit_single_gibbs)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_scalable_normal_logit_single_gibbs p_scalable_normal_logit_single_gibbs = NULL;
        if (p_scalable_normal_logit_single_gibbs == NULL) {
            validateSignature("Rcpp::List(*scalable_normal_logit_single_gibbs)(arma::vec&,SEXP,arma::uvec&,int,int,int,double,int)");
            p_scalable_normal_logit_single_gibbs = (Ptr_scalable_normal_logit_single_gibbs)R_GetCCallable("fastBayesReg", "_fastBayesReg_scalable_normal_logit_single_gibbs");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_scalable_normal_logit_single_gibbs(Shield<SEXP>(Rcpp::wrap(y)), Shield<SEXP>(Rcpp::wrap(bigX)), Shield<SEXP>(Rcpp::wrap(rowidx)), Shield<SEXP>(Rcpp::wrap(mcmc_sample)), Shield<SEXP>(Rcpp::wrap(burnin)), Shield<SEXP>(Rcpp::wrap(thinning)), Shield<SEXP>(Rcpp::wrap(A_tau)), Shield<SEXP>(Rcpp::wrap(verbose)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List big_normal_logit_single_gibbs(arma::vec& y, SEXP bigX, int mcmc_sample = 500, int burnin = 500, int thinning = 1, double A_tau = 1, int verbose = 0) {
        typedef SEXP(*Ptr_big_normal_logit_single_gibbs)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_big_normal_logit_single_gibbs p_big_normal_logit_single_gibbs = NULL;
        if (p_big_normal_logit_single_gibbs == NULL) {
            validateSignature("Rcpp::List(*big_normal_logit_single_gibbs)(arma::vec&,SEXP,int,int,int,double,int)");
            p_big_normal_logit_single_gibbs = (Ptr_big_normal_logit_single_gibbs)R_GetCCallable("fastBayesReg", "_fastBayesReg_big_normal_logit_single_gibbs");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_big_normal_logit_single_gibbs(Shield<SEXP>(Rcpp::wrap(y)), Shield<SEXP>(Rcpp::wrap(bigX)), Shield<SEXP>(Rcpp::wrap(mcmc_sample)), Shield<SEXP>(Rcpp::wrap(burnin)), Shield<SEXP>(Rcpp::wrap(thinning)), Shield<SEXP>(Rcpp::wrap(A_tau)), Shield<SEXP>(Rcpp::wrap(verbose)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List sparse_normal_logit_single_gibbs(arma::vec& y, arma::sp_mat& X, int mcmc_sample = 500, int burnin = 500, int thinning = 1, double A_tau = 1, int verbose = 0) {
        typedef SEXP(*Ptr_sparse_normal_logit_single_gibbs)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_sparse_normal_logit_single_gibbs p_sparse_normal_logit_single_gibbs = NULL;
        if (p_sparse_normal_logit_single_gibbs == NULL) {
            validateSignature("Rcpp::List(*sparse_normal_logit_single_gibbs)(arma::vec&,arma::sp_mat&,int,int,int,double,int)");
            p_sparse_normal_logit_single_gibbs = (Ptr_sparse_normal_logit_single_gibbs)R_GetCCallable("fastBayesReg", "_fastBayesReg_sparse_normal_logit_single_gibbs");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_sparse_normal_logit_single_gibbs(Shield<SEXP>(Rcpp::wrap(y)), Shield<SEXP>(Rcpp::wrap(X)), Shield<SEXP>(Rcpp::wrap(mcmc_sample)), Shield<SEXP>(Rcpp::wrap(burnin)), Shield<SEXP>(Rcpp::wrap(thinning)), Shield<SEXP>(Rcpp::wrap(A_tau)), Shield<SEXP>(Rcpp::wrap(verbose)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List fast_normal_multiclass(arma::vec& y, arma::mat& X, int num_class, int mcmc_sample = 500, int burnin = 500, int thinning = 1, double A_tau = 1) {
        typedef SEXP(*Ptr_fast_normal_multiclass)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_fast_normal_multiclass p_fast_normal_multiclass = NULL;
        if (p_fast_normal_multiclass == NULL) {
            validateSignature("Rcpp::List(*fast_normal_multiclass)(arma::vec&,arma::mat&,int,int,int,int,double)");
            p_fast_normal_multiclass = (Ptr_fast_normal_multiclass)R_GetCCallable("fastBayesReg", "_fastBayesReg_fast_normal_multiclass");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_fast_normal_multiclass(Shield<SEXP>(Rcpp::wrap(y)), Shield<SEXP>(Rcpp::wrap(X)), Shield<SEXP>(Rcpp::wrap(num_class)), Shield<SEXP>(Rcpp::wrap(mcmc_sample)), Shield<SEXP>(Rcpp::wrap(burnin)), Shield<SEXP>(Rcpp::wrap(thinning)), Shield<SEXP>(Rcpp::wrap(A_tau)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List fast_normal_multiclass_single_gibbs(arma::vec& y, arma::mat& X, int num_class, int mcmc_sample = 500, int burnin = 500, int thinning = 1, double A_tau = 1, int verbose = 0) {
        typedef SEXP(*Ptr_fast_normal_multiclass_single_gibbs)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_fast_normal_multiclass_single_gibbs p_fast_normal_multiclass_single_gibbs = NULL;
        if (p_fast_normal_multiclass_single_gibbs == NULL) {
            validateSignature("Rcpp::List(*fast_normal_multiclass_single_gibbs)(arma::vec&,arma::mat&,int,int,int,int,double,int)");
            p_fast_normal_multiclass_single_gibbs = (Ptr_fast_normal_multiclass_single_gibbs)R_GetCCallable("fastBayesReg", "_fastBayesReg_fast_normal_multiclass_single_gibbs");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_fast_normal_multiclass_single_gibbs(Shield<SEXP>(Rcpp::wrap(y)), Shield<SEXP>(Rcpp::wrap(X)), Shield<SEXP>(Rcpp::wrap(num_class)), Shield<SEXP>(Rcpp::wrap(mcmc_sample)), Shield<SEXP>(Rcpp::wrap(burnin)), Shield<SEXP>(Rcpp::wrap(thinning)), Shield<SEXP>(Rcpp::wrap(A_tau)), Shield<SEXP>(Rcpp::wrap(verbose)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List scalable_normal_multiclass_single_gibbs(arma::vec& y, arma::mat& X, int num_class, int mcmc_sample = 500, int burnin = 500, int thinning = 1, double A_tau = 1, int verbose = 0) {
        typedef SEXP(*Ptr_scalable_normal_multiclass_single_gibbs)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_scalable_normal_multiclass_single_gibbs p_scalable_normal_multiclass_single_gibbs = NULL;
        if (p_scalable_normal_multiclass_single_gibbs == NULL) {
            validateSignature("Rcpp::List(*scalable_normal_multiclass_single_gibbs)(arma::vec&,arma::mat&,int,int,int,int,double,int)");
            p_scalable_normal_multiclass_single_gibbs = (Ptr_scalable_normal_multiclass_single_gibbs)R_GetCCallable("fastBayesReg", "_fastBayesReg_scalable_normal_multiclass_single_gibbs");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_scalable_normal_multiclass_single_gibbs(Shield<SEXP>(Rcpp::wrap(y)), Shield<SEXP>(Rcpp::wrap(X)), Shield<SEXP>(Rcpp::wrap(num_class)), Shield<SEXP>(Rcpp::wrap(mcmc_sample)), Shield<SEXP>(Rcpp::wrap(burnin)), Shield<SEXP>(Rcpp::wrap(thinning)), Shield<SEXP>(Rcpp::wrap(A_tau)), Shield<SEXP>(Rcpp::wrap(verbose)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List fast_mfvb_normal_logit(arma::vec& y, arma::mat& X, int max_iter = 5000, double tol = 1e-05, double A = 10, double in_E_inv_tau_sq = 1, Rcpp::Nullable<Rcpp::NumericVector> in_E_omega = R_NilValue, Rcpp::Nullable<Rcpp::NumericVector> in_E_beta = R_NilValue) {
        typedef SEXP(*Ptr_fast_mfvb_normal_logit)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_fast_mfvb_normal_logit p_fast_mfvb_normal_logit = NULL;
        if (p_fast_mfvb_normal_logit == NULL) {
            validateSignature("Rcpp::List(*fast_mfvb_normal_logit)(arma::vec&,arma::mat&,int,double,double,double,Rcpp::Nullable<Rcpp::NumericVector>,Rcpp::Nullable<Rcpp::NumericVector>)");
            p_fast_mfvb_normal_logit = (Ptr_fast_mfvb_normal_logit)R_GetCCallable("fastBayesReg", "_fastBayesReg_fast_mfvb_normal_logit");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_fast_mfvb_normal_logit(Shield<SEXP>(Rcpp::wrap(y)), Shield<SEXP>(Rcpp::wrap(X)), Shield<SEXP>(Rcpp::wrap(max_iter)), Shield<SEXP>(Rcpp::wrap(tol)), Shield<SEXP>(Rcpp::wrap(A)), Shield<SEXP>(Rcpp::wrap(in_E_inv_tau_sq)), Shield<SEXP>(Rcpp::wrap(in_E_omega)), Shield<SEXP>(Rcpp::wrap(in_E_beta)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List fast_mfvb_normal_logit_single(arma::vec& y, arma::mat& X, int max_iter = 5000, double tol = 1e-05, double A = 10, double in_E_inv_tau_sq = 1, Rcpp::Nullable<Rcpp::NumericVector> in_E_omega = R_NilValue, Rcpp::Nullable<Rcpp::NumericVector> in_E_beta = R_NilValue) {
        typedef SEXP(*Ptr_fast_mfvb_normal_logit_single)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_fast_mfvb_normal_logit_single p_fast_mfvb_normal_logit_single = NULL;
        if (p_fast_mfvb_normal_logit_single == NULL) {
            validateSignature("Rcpp::List(*fast_mfvb_normal_logit_single)(arma::vec&,arma::mat&,int,double,double,double,Rcpp::Nullable<Rcpp::NumericVector>,Rcpp::Nullable<Rcpp::NumericVector>)");
            p_fast_mfvb_normal_logit_single = (Ptr_fast_mfvb_normal_logit_single)R_GetCCallable("fastBayesReg", "_fastBayesReg_fast_mfvb_normal_logit_single");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_fast_mfvb_normal_logit_single(Shield<SEXP>(Rcpp::wrap(y)), Shield<SEXP>(Rcpp::wrap(X)), Shield<SEXP>(Rcpp::wrap(max_iter)), Shield<SEXP>(Rcpp::wrap(tol)), Shield<SEXP>(Rcpp::wrap(A)), Shield<SEXP>(Rcpp::wrap(in_E_inv_tau_sq)), Shield<SEXP>(Rcpp::wrap(in_E_omega)), Shield<SEXP>(Rcpp::wrap(in_E_beta)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List fast_mfvb_multiclass(arma::vec& y, arma::mat& X, int num_class, int mcmc_sample = 500, int burnin = 500, int thinning = 1, double A_tau = 1) {
        typedef SEXP(*Ptr_fast_mfvb_multiclass)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_fast_mfvb_multiclass p_fast_mfvb_multiclass = NULL;
        if (p_fast_mfvb_multiclass == NULL) {
            validateSignature("Rcpp::List(*fast_mfvb_multiclass)(arma::vec&,arma::mat&,int,int,int,int,double)");
            p_fast_mfvb_multiclass = (Ptr_fast_mfvb_multiclass)R_GetCCallable("fastBayesReg", "_fastBayesReg_fast_mfvb_multiclass");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_fast_mfvb_multiclass(Shield<SEXP>(Rcpp::wrap(y)), Shield<SEXP>(Rcpp::wrap(X)), Shield<SEXP>(Rcpp::wrap(num_class)), Shield<SEXP>(Rcpp::wrap(mcmc_sample)), Shield<SEXP>(Rcpp::wrap(burnin)), Shield<SEXP>(Rcpp::wrap(thinning)), Shield<SEXP>(Rcpp::wrap(A_tau)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List fast_horseshoe_logit(arma::vec& y, arma::mat& X, int mcmc_sample = 500, int burnin = 500, int thinning = 1, double A_tau = 1, double A_lambda = 1) {
        typedef SEXP(*Ptr_fast_horseshoe_logit)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_fast_horseshoe_logit p_fast_horseshoe_logit = NULL;
        if (p_fast_horseshoe_logit == NULL) {
            validateSignature("Rcpp::List(*fast_horseshoe_logit)(arma::vec&,arma::mat&,int,int,int,double,double)");
            p_fast_horseshoe_logit = (Ptr_fast_horseshoe_logit)R_GetCCallable("fastBayesReg", "_fastBayesReg_fast_horseshoe_logit");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_fast_horseshoe_logit(Shield<SEXP>(Rcpp::wrap(y)), Shield<SEXP>(Rcpp::wrap(X)), Shield<SEXP>(Rcpp::wrap(mcmc_sample)), Shield<SEXP>(Rcpp::wrap(burnin)), Shield<SEXP>(Rcpp::wrap(thinning)), Shield<SEXP>(Rcpp::wrap(A_tau)), Shield<SEXP>(Rcpp::wrap(A_lambda)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline arma::vec rand_left_trucnorm0(int n, double lower, double ratio = 1.0) {
        typedef SEXP(*Ptr_rand_left_trucnorm0)(SEXP,SEXP,SEXP);
        static Ptr_rand_left_trucnorm0 p_rand_left_trucnorm0 = NULL;
        if (p_rand_left_trucnorm0 == NULL) {
            validateSignature("arma::vec(*rand_left_trucnorm0)(int,double,double)");
            p_rand_left_trucnorm0 = (Ptr_rand_left_trucnorm0)R_GetCCallable("fastBayesReg", "_fastBayesReg_rand_left_trucnorm0");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_rand_left_trucnorm0(Shield<SEXP>(Rcpp::wrap(n)), Shield<SEXP>(Rcpp::wrap(lower)), Shield<SEXP>(Rcpp::wrap(ratio)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::vec >(rcpp_result_gen);
    }

    inline arma::vec rand_left_trucnorm(int n, double mu, double sigma, double lower, double ratio = 1.0) {
        typedef SEXP(*Ptr_rand_left_trucnorm)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_rand_left_trucnorm p_rand_left_trucnorm = NULL;
        if (p_rand_left_trucnorm == NULL) {
            validateSignature("arma::vec(*rand_left_trucnorm)(int,double,double,double,double)");
            p_rand_left_trucnorm = (Ptr_rand_left_trucnorm)R_GetCCallable("fastBayesReg", "_fastBayesReg_rand_left_trucnorm");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_rand_left_trucnorm(Shield<SEXP>(Rcpp::wrap(n)), Shield<SEXP>(Rcpp::wrap(mu)), Shield<SEXP>(Rcpp::wrap(sigma)), Shield<SEXP>(Rcpp::wrap(lower)), Shield<SEXP>(Rcpp::wrap(ratio)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::vec >(rcpp_result_gen);
    }

    inline arma::vec rand_right_trucnorm(int n, double mu, double sigma, double upper, double ratio = 1.0) {
        typedef SEXP(*Ptr_rand_right_trucnorm)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_rand_right_trucnorm p_rand_right_trucnorm = NULL;
        if (p_rand_right_trucnorm == NULL) {
            validateSignature("arma::vec(*rand_right_trucnorm)(int,double,double,double,double)");
            p_rand_right_trucnorm = (Ptr_rand_right_trucnorm)R_GetCCallable("fastBayesReg", "_fastBayesReg_rand_right_trucnorm");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_rand_right_trucnorm(Shield<SEXP>(Rcpp::wrap(n)), Shield<SEXP>(Rcpp::wrap(mu)), Shield<SEXP>(Rcpp::wrap(sigma)), Shield<SEXP>(Rcpp::wrap(upper)), Shield<SEXP>(Rcpp::wrap(ratio)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::vec >(rcpp_result_gen);
    }

    inline Rcpp::List fast_horseshoe_lm(arma::vec& y, arma::mat& X, int mcmc_sample = 500, int burnin = 500, int thinning = 1, double a_sigma = 0.0, double b_sigma = 0.0, double A_tau = 1, double A_lambda = 1) {
        typedef SEXP(*Ptr_fast_horseshoe_lm)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_fast_horseshoe_lm p_fast_horseshoe_lm = NULL;
        if (p_fast_horseshoe_lm == NULL) {
            validateSignature("Rcpp::List(*fast_horseshoe_lm)(arma::vec&,arma::mat&,int,int,int,double,double,double,double)");
            p_fast_horseshoe_lm = (Ptr_fast_horseshoe_lm)R_GetCCallable("fastBayesReg", "_fastBayesReg_fast_horseshoe_lm");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_fast_horseshoe_lm(Shield<SEXP>(Rcpp::wrap(y)), Shield<SEXP>(Rcpp::wrap(X)), Shield<SEXP>(Rcpp::wrap(mcmc_sample)), Shield<SEXP>(Rcpp::wrap(burnin)), Shield<SEXP>(Rcpp::wrap(thinning)), Shield<SEXP>(Rcpp::wrap(a_sigma)), Shield<SEXP>(Rcpp::wrap(b_sigma)), Shield<SEXP>(Rcpp::wrap(A_tau)), Shield<SEXP>(Rcpp::wrap(A_lambda)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List fast_horseshoe_ss_lm(arma::vec& y, arma::mat& X, int mcmc_sample = 500, int burnin = 500, int thinning = 1, double a_sigma = 0.0, double b_sigma = 0.0, double A_tau = 1, double A_lambda = 1) {
        typedef SEXP(*Ptr_fast_horseshoe_ss_lm)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_fast_horseshoe_ss_lm p_fast_horseshoe_ss_lm = NULL;
        if (p_fast_horseshoe_ss_lm == NULL) {
            validateSignature("Rcpp::List(*fast_horseshoe_ss_lm)(arma::vec&,arma::mat&,int,int,int,double,double,double,double)");
            p_fast_horseshoe_ss_lm = (Ptr_fast_horseshoe_ss_lm)R_GetCCallable("fastBayesReg", "_fastBayesReg_fast_horseshoe_ss_lm");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_fast_horseshoe_ss_lm(Shield<SEXP>(Rcpp::wrap(y)), Shield<SEXP>(Rcpp::wrap(X)), Shield<SEXP>(Rcpp::wrap(mcmc_sample)), Shield<SEXP>(Rcpp::wrap(burnin)), Shield<SEXP>(Rcpp::wrap(thinning)), Shield<SEXP>(Rcpp::wrap(a_sigma)), Shield<SEXP>(Rcpp::wrap(b_sigma)), Shield<SEXP>(Rcpp::wrap(A_tau)), Shield<SEXP>(Rcpp::wrap(A_lambda)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List fast_horseshoe_hd_lm(arma::vec& y, arma::mat& X, int mcmc_sample = 500, int burnin = 500, int thinning = 1, double a_sigma = 0.0, double b_sigma = 0.0, double A_tau = 1, double A_lambda = 1) {
        typedef SEXP(*Ptr_fast_horseshoe_hd_lm)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_fast_horseshoe_hd_lm p_fast_horseshoe_hd_lm = NULL;
        if (p_fast_horseshoe_hd_lm == NULL) {
            validateSignature("Rcpp::List(*fast_horseshoe_hd_lm)(arma::vec&,arma::mat&,int,int,int,double,double,double,double)");
            p_fast_horseshoe_hd_lm = (Ptr_fast_horseshoe_hd_lm)R_GetCCallable("fastBayesReg", "_fastBayesReg_fast_horseshoe_hd_lm");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_fast_horseshoe_hd_lm(Shield<SEXP>(Rcpp::wrap(y)), Shield<SEXP>(Rcpp::wrap(X)), Shield<SEXP>(Rcpp::wrap(mcmc_sample)), Shield<SEXP>(Rcpp::wrap(burnin)), Shield<SEXP>(Rcpp::wrap(thinning)), Shield<SEXP>(Rcpp::wrap(a_sigma)), Shield<SEXP>(Rcpp::wrap(b_sigma)), Shield<SEXP>(Rcpp::wrap(A_tau)), Shield<SEXP>(Rcpp::wrap(A_lambda)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List predict_fast_lm(Rcpp::List& model_fit, arma::mat& X_test, double alpha = 0.95) {
        typedef SEXP(*Ptr_predict_fast_lm)(SEXP,SEXP,SEXP);
        static Ptr_predict_fast_lm p_predict_fast_lm = NULL;
        if (p_predict_fast_lm == NULL) {
            validateSignature("Rcpp::List(*predict_fast_lm)(Rcpp::List&,arma::mat&,double)");
            p_predict_fast_lm = (Ptr_predict_fast_lm)R_GetCCallable("fastBayesReg", "_fastBayesReg_predict_fast_lm");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_predict_fast_lm(Shield<SEXP>(Rcpp::wrap(model_fit)), Shield<SEXP>(Rcpp::wrap(X_test)), Shield<SEXP>(Rcpp::wrap(alpha)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List predict_fast_multi_lm(Rcpp::List& model_fit, arma::mat& X_test) {
        typedef SEXP(*Ptr_predict_fast_multi_lm)(SEXP,SEXP);
        static Ptr_predict_fast_multi_lm p_predict_fast_multi_lm = NULL;
        if (p_predict_fast_multi_lm == NULL) {
            validateSignature("Rcpp::List(*predict_fast_multi_lm)(Rcpp::List&,arma::mat&)");
            p_predict_fast_multi_lm = (Ptr_predict_fast_multi_lm)R_GetCCallable("fastBayesReg", "_fastBayesReg_predict_fast_multi_lm");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_predict_fast_multi_lm(Shield<SEXP>(Rcpp::wrap(model_fit)), Shield<SEXP>(Rcpp::wrap(X_test)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List predict_fast_mfvb_lm(Rcpp::List& model_fit, arma::mat& X_test) {
        typedef SEXP(*Ptr_predict_fast_mfvb_lm)(SEXP,SEXP);
        static Ptr_predict_fast_mfvb_lm p_predict_fast_mfvb_lm = NULL;
        if (p_predict_fast_mfvb_lm == NULL) {
            validateSignature("Rcpp::List(*predict_fast_mfvb_lm)(Rcpp::List&,arma::mat&)");
            p_predict_fast_mfvb_lm = (Ptr_predict_fast_mfvb_lm)R_GetCCallable("fastBayesReg", "_fastBayesReg_predict_fast_mfvb_lm");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_predict_fast_mfvb_lm(Shield<SEXP>(Rcpp::wrap(model_fit)), Shield<SEXP>(Rcpp::wrap(X_test)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List predict_fast_logit(Rcpp::List& model_fit, arma::mat& X_test, double alpha = 0.95, double cutoff = 0.5) {
        typedef SEXP(*Ptr_predict_fast_logit)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_predict_fast_logit p_predict_fast_logit = NULL;
        if (p_predict_fast_logit == NULL) {
            validateSignature("Rcpp::List(*predict_fast_logit)(Rcpp::List&,arma::mat&,double,double)");
            p_predict_fast_logit = (Ptr_predict_fast_logit)R_GetCCallable("fastBayesReg", "_fastBayesReg_predict_fast_logit");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_predict_fast_logit(Shield<SEXP>(Rcpp::wrap(model_fit)), Shield<SEXP>(Rcpp::wrap(X_test)), Shield<SEXP>(Rcpp::wrap(alpha)), Shield<SEXP>(Rcpp::wrap(cutoff)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List predict_fast_multiclass(Rcpp::List& model_fit, arma::mat& X_test) {
        typedef SEXP(*Ptr_predict_fast_multiclass)(SEXP,SEXP);
        static Ptr_predict_fast_multiclass p_predict_fast_multiclass = NULL;
        if (p_predict_fast_multiclass == NULL) {
            validateSignature("Rcpp::List(*predict_fast_multiclass)(Rcpp::List&,arma::mat&)");
            p_predict_fast_multiclass = (Ptr_predict_fast_multiclass)R_GetCCallable("fastBayesReg", "_fastBayesReg_predict_fast_multiclass");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_predict_fast_multiclass(Shield<SEXP>(Rcpp::wrap(model_fit)), Shield<SEXP>(Rcpp::wrap(X_test)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List predict_fast_mfvb_logit(Rcpp::List& model_fit, arma::mat& X_test, double alpha = 0.95, double cutoff = 0.5) {
        typedef SEXP(*Ptr_predict_fast_mfvb_logit)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_predict_fast_mfvb_logit p_predict_fast_mfvb_logit = NULL;
        if (p_predict_fast_mfvb_logit == NULL) {
            validateSignature("Rcpp::List(*predict_fast_mfvb_logit)(Rcpp::List&,arma::mat&,double,double)");
            p_predict_fast_mfvb_logit = (Ptr_predict_fast_mfvb_logit)R_GetCCallable("fastBayesReg", "_fastBayesReg_predict_fast_mfvb_logit");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_predict_fast_mfvb_logit(Shield<SEXP>(Rcpp::wrap(model_fit)), Shield<SEXP>(Rcpp::wrap(X_test)), Shield<SEXP>(Rcpp::wrap(alpha)), Shield<SEXP>(Rcpp::wrap(cutoff)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

    inline Rcpp::List fast_mfvb_normal_lm(arma::vec& y, arma::mat& X, int max_iter = 500, double a_sigma = 0.01, double b_sigma = 0.01, double A_tau = 1, double tol = 1e-5, double t_sigma2_eps_0 = 0, double t_tau2_0 = 0) {
        typedef SEXP(*Ptr_fast_mfvb_normal_lm)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_fast_mfvb_normal_lm p_fast_mfvb_normal_lm = NULL;
        if (p_fast_mfvb_normal_lm == NULL) {
            validateSignature("Rcpp::List(*fast_mfvb_normal_lm)(arma::vec&,arma::mat&,int,double,double,double,double,double,double)");
            p_fast_mfvb_normal_lm = (Ptr_fast_mfvb_normal_lm)R_GetCCallable("fastBayesReg", "_fastBayesReg_fast_mfvb_normal_lm");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_fast_mfvb_normal_lm(Shield<SEXP>(Rcpp::wrap(y)), Shield<SEXP>(Rcpp::wrap(X)), Shield<SEXP>(Rcpp::wrap(max_iter)), Shield<SEXP>(Rcpp::wrap(a_sigma)), Shield<SEXP>(Rcpp::wrap(b_sigma)), Shield<SEXP>(Rcpp::wrap(A_tau)), Shield<SEXP>(Rcpp::wrap(tol)), Shield<SEXP>(Rcpp::wrap(t_sigma2_eps_0)), Shield<SEXP>(Rcpp::wrap(t_tau2_0)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

}

#endif // RCPP_fastBayesReg_RCPPEXPORTS_H_GEN_
